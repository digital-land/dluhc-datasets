"""add datatype to fields

Revision ID: c15b2a5dbd3c
Revises: e6561c8f21cb
Create Date: 2023-08-29 12:20:59.828121

"""
import sqlalchemy as sa
import requests

from alembic import op
from sqlalchemy.orm.session import Session

from application.models import Field


datasette_url = "https://datasette.planning.data.gov.uk/digital-land"
datasette_query = "{datasette_url}/field.json?field__exact={field}&_shape=object"

# revision identifiers, used by Alembic.
revision = "c15b2a5dbd3c"
down_revision = "e6561c8f21cb"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("field", schema=None) as batch_op:
        batch_op.add_column(sa.Column("datatype", sa.Text(), nullable=True))

    session = Session(bind=op.get_bind())
    fields = session.query(Field).all()
    for field in fields:
        field_query = datasette_query.format(
            datasette_url=datasette_url, field=field.field
        )
        resp = requests.get(field_query)
        if resp.status_code == 200:
            print("datatype =>", resp.json()[field.field]["datatype"])
            field.datatype = resp.json()[field.field]["datatype"]
            session.add(field)
            session.commit()

    session.close()

    op.alter_column("field", "datatype", nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("field", schema=None) as batch_op:
        batch_op.drop_column("datatype")

    # ### end Alembic commands ###
