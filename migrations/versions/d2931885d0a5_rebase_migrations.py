"""rebase migrations

Revision ID: 9fd78b084ce5
Revises:
Create Date: 2025-03-28 12:29:47.678552

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd2931885d0a5'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('PENDING', 'COMPLETE', 'INCOMPLETE', 'CANCELLED', name='updatestatus').create(op.get_bind())
    sa.Enum('ADD', 'EDIT', 'ARCHIVE', name='changetype').create(op.get_bind())
    op.create_table('dataset',
    sa.Column('dataset', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('last_updated', sa.Date(), nullable=True),
    sa.Column('entity_minimum', sa.BigInteger(), nullable=True),
    sa.Column('entity_maximum', sa.BigInteger(), nullable=True),
    sa.Column('consideration', sa.Text(), nullable=True),
    sa.Column('custodian', sa.Text(), nullable=True),
    sa.Column('specification', sa.Text(), nullable=True),
    sa.Column('referenced_by', sa.Text(), nullable=True),
    sa.Column('entry_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('dataset')
    )
    op.create_table('field',
    sa.Column('field', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('datatype', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('entry_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('field')
    )
    op.create_table('dataset_field',
    sa.Column('dataset', sa.Text(), nullable=False),
    sa.Column('field', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['dataset'], ['dataset.dataset'], ),
    sa.ForeignKeyConstraint(['field'], ['field.field'], ),
    sa.PrimaryKeyConstraint('dataset', 'field')
    )
    op.create_table('record',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('row_id', sa.Integer(), nullable=False),
    sa.Column('entity', sa.BigInteger(), nullable=True),
    sa.Column('prefix', sa.Text(), nullable=True),
    sa.Column('reference', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('dataset_id', sa.Text(), nullable=False),
    sa.Column('entry_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.dataset'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reference',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dataset_id', sa.Text(), nullable=False),
    sa.Column('referenced_by', sa.Text(), nullable=False),
    sa.Column('specification', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.dataset'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('update',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dataset_id', sa.Text(), nullable=False),
    sa.Column('created_date', sa.Date(), nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'COMPLETE', 'INCOMPLETE', 'CANCELLED', name='updatestatus', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.dataset'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('change_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dataset_id', sa.Text(), nullable=False),
    sa.Column('change_type', postgresql.ENUM('ADD', 'EDIT', 'ARCHIVE', name='changetype', create_type=False), nullable=False),
    sa.Column('created_date', sa.Date(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('record_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.dataset'], ),
    sa.ForeignKeyConstraint(['record_id'], ['record.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('update_record',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('update_id', sa.UUID(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('processed', sa.Boolean(), nullable=False),
    sa.Column('changes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('new_record', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['update_id'], ['update.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('update_record')
    op.drop_table('change_log')
    op.drop_table('update')
    op.drop_table('reference')
    op.drop_table('record')
    op.drop_table('dataset_field')
    op.drop_table('field')
    op.drop_table('dataset')
    sa.Enum('ADD', 'EDIT', 'ARCHIVE', name='changetype').drop(op.get_bind())
    sa.Enum('PENDING', 'COMPLETE', 'INCOMPLETE', 'CANCELLED', name='updatestatus').drop(op.get_bind())
    # ### end Alembic commands ###
